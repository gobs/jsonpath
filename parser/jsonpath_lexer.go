// Generated from Jsonpath.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 23, 152,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7,
	3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 12,
	3, 12, 7, 12, 71, 10, 12, 12, 12, 14, 12, 74, 11, 12, 3, 13, 3, 13, 3,
	13, 6, 13, 79, 10, 13, 13, 13, 14, 13, 80, 5, 13, 83, 10, 13, 3, 14, 5,
	14, 86, 10, 14, 3, 14, 6, 14, 89, 10, 14, 13, 14, 14, 14, 90, 3, 15, 3,
	15, 7, 15, 95, 10, 15, 12, 15, 14, 15, 98, 11, 15, 3, 15, 3, 15, 3, 16,
	3, 16, 7, 16, 104, 10, 16, 12, 16, 14, 16, 107, 11, 16, 3, 16, 3, 16, 7,
	16, 111, 10, 16, 12, 16, 14, 16, 114, 11, 16, 3, 17, 3, 17, 3, 17, 5, 17,
	119, 10, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3,
	19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 144, 10, 21, 3, 22, 6, 22, 147, 10,
	22, 13, 22, 14, 22, 148, 3, 22, 3, 22, 2, 2, 23, 3, 3, 5, 4, 7, 5, 9, 6,
	11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29,
	16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 3, 2, 9, 4,
	2, 67, 92, 99, 124, 6, 2, 50, 59, 67, 92, 97, 97, 99, 124, 3, 2, 41, 41,
	3, 2, 49, 49, 6, 2, 85, 85, 107, 107, 111, 111, 119, 119, 5, 2, 44, 45,
	47, 47, 49, 49, 5, 2, 11, 12, 15, 15, 34, 34, 2, 166, 2, 3, 3, 2, 2, 2,
	2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2,
	2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2,
	2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2,
	2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3,
	2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43,
	3, 2, 2, 2, 3, 45, 3, 2, 2, 2, 5, 47, 3, 2, 2, 2, 7, 49, 3, 2, 2, 2, 9,
	51, 3, 2, 2, 2, 11, 53, 3, 2, 2, 2, 13, 55, 3, 2, 2, 2, 15, 58, 3, 2, 2,
	2, 17, 60, 3, 2, 2, 2, 19, 62, 3, 2, 2, 2, 21, 65, 3, 2, 2, 2, 23, 68,
	3, 2, 2, 2, 25, 75, 3, 2, 2, 2, 27, 85, 3, 2, 2, 2, 29, 92, 3, 2, 2, 2,
	31, 101, 3, 2, 2, 2, 33, 118, 3, 2, 2, 2, 35, 120, 3, 2, 2, 2, 37, 122,
	3, 2, 2, 2, 39, 131, 3, 2, 2, 2, 41, 143, 3, 2, 2, 2, 43, 146, 3, 2, 2,
	2, 45, 46, 7, 38, 2, 2, 46, 4, 3, 2, 2, 2, 47, 48, 7, 93, 2, 2, 48, 6,
	3, 2, 2, 2, 49, 50, 7, 95, 2, 2, 50, 8, 3, 2, 2, 2, 51, 52, 7, 60, 2, 2,
	52, 10, 3, 2, 2, 2, 53, 54, 7, 46, 2, 2, 54, 12, 3, 2, 2, 2, 55, 56, 7,
	65, 2, 2, 56, 57, 7, 42, 2, 2, 57, 14, 3, 2, 2, 2, 58, 59, 7, 43, 2, 2,
	59, 16, 3, 2, 2, 2, 60, 61, 7, 42, 2, 2, 61, 18, 3, 2, 2, 2, 62, 63, 7,
	66, 2, 2, 63, 64, 7, 48, 2, 2, 64, 20, 3, 2, 2, 2, 65, 66, 7, 63, 2, 2,
	66, 67, 7, 128, 2, 2, 67, 22, 3, 2, 2, 2, 68, 72, 9, 2, 2, 2, 69, 71, 9,
	3, 2, 2, 70, 69, 3, 2, 2, 2, 71, 74, 3, 2, 2, 2, 72, 70, 3, 2, 2, 2, 72,
	73, 3, 2, 2, 2, 73, 24, 3, 2, 2, 2, 74, 72, 3, 2, 2, 2, 75, 82, 5, 27,
	14, 2, 76, 78, 7, 48, 2, 2, 77, 79, 4, 50, 59, 2, 78, 77, 3, 2, 2, 2, 79,
	80, 3, 2, 2, 2, 80, 78, 3, 2, 2, 2, 80, 81, 3, 2, 2, 2, 81, 83, 3, 2, 2,
	2, 82, 76, 3, 2, 2, 2, 82, 83, 3, 2, 2, 2, 83, 26, 3, 2, 2, 2, 84, 86,
	7, 47, 2, 2, 85, 84, 3, 2, 2, 2, 85, 86, 3, 2, 2, 2, 86, 88, 3, 2, 2, 2,
	87, 89, 4, 50, 59, 2, 88, 87, 3, 2, 2, 2, 89, 90, 3, 2, 2, 2, 90, 88, 3,
	2, 2, 2, 90, 91, 3, 2, 2, 2, 91, 28, 3, 2, 2, 2, 92, 96, 7, 41, 2, 2, 93,
	95, 10, 4, 2, 2, 94, 93, 3, 2, 2, 2, 95, 98, 3, 2, 2, 2, 96, 94, 3, 2,
	2, 2, 96, 97, 3, 2, 2, 2, 97, 99, 3, 2, 2, 2, 98, 96, 3, 2, 2, 2, 99, 100,
	7, 41, 2, 2, 100, 30, 3, 2, 2, 2, 101, 105, 7, 49, 2, 2, 102, 104, 10,
	5, 2, 2, 103, 102, 3, 2, 2, 2, 104, 107, 3, 2, 2, 2, 105, 103, 3, 2, 2,
	2, 105, 106, 3, 2, 2, 2, 106, 108, 3, 2, 2, 2, 107, 105, 3, 2, 2, 2, 108,
	112, 7, 49, 2, 2, 109, 111, 9, 6, 2, 2, 110, 109, 3, 2, 2, 2, 111, 114,
	3, 2, 2, 2, 112, 110, 3, 2, 2, 2, 112, 113, 3, 2, 2, 2, 113, 32, 3, 2,
	2, 2, 114, 112, 3, 2, 2, 2, 115, 119, 7, 48, 2, 2, 116, 117, 7, 48, 2,
	2, 117, 119, 7, 48, 2, 2, 118, 115, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 119,
	34, 3, 2, 2, 2, 120, 121, 7, 44, 2, 2, 121, 36, 3, 2, 2, 2, 122, 123, 7,
	110, 2, 2, 123, 124, 7, 103, 2, 2, 124, 125, 7, 112, 2, 2, 125, 126, 7,
	105, 2, 2, 126, 127, 7, 118, 2, 2, 127, 128, 7, 106, 2, 2, 128, 129, 7,
	42, 2, 2, 129, 130, 7, 43, 2, 2, 130, 38, 3, 2, 2, 2, 131, 132, 9, 7, 2,
	2, 132, 40, 3, 2, 2, 2, 133, 144, 7, 64, 2, 2, 134, 135, 7, 64, 2, 2, 135,
	144, 7, 63, 2, 2, 136, 144, 7, 62, 2, 2, 137, 138, 7, 62, 2, 2, 138, 144,
	7, 63, 2, 2, 139, 140, 7, 63, 2, 2, 140, 144, 7, 63, 2, 2, 141, 142, 7,
	35, 2, 2, 142, 144, 7, 63, 2, 2, 143, 133, 3, 2, 2, 2, 143, 134, 3, 2,
	2, 2, 143, 136, 3, 2, 2, 2, 143, 137, 3, 2, 2, 2, 143, 139, 3, 2, 2, 2,
	143, 141, 3, 2, 2, 2, 144, 42, 3, 2, 2, 2, 145, 147, 9, 8, 2, 2, 146, 145,
	3, 2, 2, 2, 147, 148, 3, 2, 2, 2, 148, 146, 3, 2, 2, 2, 148, 149, 3, 2,
	2, 2, 149, 150, 3, 2, 2, 2, 150, 151, 8, 22, 2, 2, 151, 44, 3, 2, 2, 2,
	14, 2, 72, 80, 82, 85, 90, 96, 105, 112, 118, 143, 148, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'$'", "'['", "']'", "':'", "','", "'?('", "')'", "'('", "'@.'", "'=~'",
	"", "", "", "", "", "", "'*'", "'length()'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "Identifier", "NUMBER", "INT",
	"QUOTED", "REGEX", "DOTS", "STAR", "Length", "OP", "COMP", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "Identifier", "NUMBER", "INT", "QUOTED", "REGEX", "DOTS", "STAR",
	"Length", "OP", "COMP", "WS",
}

type JsonpathLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewJsonpathLexer(input antlr.CharStream) *JsonpathLexer {

	l := new(JsonpathLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Jsonpath.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// JsonpathLexer tokens.
const (
	JsonpathLexerT__0       = 1
	JsonpathLexerT__1       = 2
	JsonpathLexerT__2       = 3
	JsonpathLexerT__3       = 4
	JsonpathLexerT__4       = 5
	JsonpathLexerT__5       = 6
	JsonpathLexerT__6       = 7
	JsonpathLexerT__7       = 8
	JsonpathLexerT__8       = 9
	JsonpathLexerT__9       = 10
	JsonpathLexerIdentifier = 11
	JsonpathLexerNUMBER     = 12
	JsonpathLexerINT        = 13
	JsonpathLexerQUOTED     = 14
	JsonpathLexerREGEX      = 15
	JsonpathLexerDOTS       = 16
	JsonpathLexerSTAR       = 17
	JsonpathLexerLength     = 18
	JsonpathLexerOP         = 19
	JsonpathLexerCOMP       = 20
	JsonpathLexerWS         = 21
)
