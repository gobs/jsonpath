// Generated from Jsonpath.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 25, 164,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10,
	3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 7, 15,
	90, 10, 15, 12, 15, 14, 15, 93, 11, 15, 3, 16, 5, 16, 96, 10, 16, 3, 16,
	6, 16, 99, 10, 16, 13, 16, 14, 16, 100, 3, 17, 5, 17, 104, 10, 17, 3, 17,
	6, 17, 107, 10, 17, 13, 17, 14, 17, 108, 3, 17, 3, 17, 6, 17, 113, 10,
	17, 13, 17, 14, 17, 114, 5, 17, 117, 10, 17, 3, 18, 3, 18, 7, 18, 121,
	10, 18, 12, 18, 14, 18, 124, 11, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19,
	5, 19, 131, 10, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 156, 10, 23, 3, 24, 6, 24, 159,
	10, 24, 13, 24, 14, 24, 160, 3, 24, 3, 24, 2, 2, 25, 3, 3, 5, 4, 7, 5,
	9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27,
	15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 45,
	24, 47, 25, 3, 2, 7, 4, 2, 67, 92, 99, 124, 6, 2, 50, 59, 67, 92, 97, 97,
	99, 124, 3, 2, 41, 41, 5, 2, 44, 45, 47, 47, 49, 49, 5, 2, 11, 12, 15,
	15, 34, 34, 2, 178, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2,
	2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2,
	2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3,
	2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31,
	3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2,
	39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2,
	2, 47, 3, 2, 2, 2, 3, 49, 3, 2, 2, 2, 5, 51, 3, 2, 2, 2, 7, 53, 3, 2, 2,
	2, 9, 55, 3, 2, 2, 2, 11, 57, 3, 2, 2, 2, 13, 59, 3, 2, 2, 2, 15, 62, 3,
	2, 2, 2, 17, 64, 3, 2, 2, 2, 19, 66, 3, 2, 2, 2, 21, 69, 3, 2, 2, 2, 23,
	72, 3, 2, 2, 2, 25, 75, 3, 2, 2, 2, 27, 84, 3, 2, 2, 2, 29, 87, 3, 2, 2,
	2, 31, 95, 3, 2, 2, 2, 33, 103, 3, 2, 2, 2, 35, 118, 3, 2, 2, 2, 37, 130,
	3, 2, 2, 2, 39, 132, 3, 2, 2, 2, 41, 134, 3, 2, 2, 2, 43, 143, 3, 2, 2,
	2, 45, 155, 3, 2, 2, 2, 47, 158, 3, 2, 2, 2, 49, 50, 7, 38, 2, 2, 50, 4,
	3, 2, 2, 2, 51, 52, 7, 93, 2, 2, 52, 6, 3, 2, 2, 2, 53, 54, 7, 95, 2, 2,
	54, 8, 3, 2, 2, 2, 55, 56, 7, 60, 2, 2, 56, 10, 3, 2, 2, 2, 57, 58, 7,
	46, 2, 2, 58, 12, 3, 2, 2, 2, 59, 60, 7, 65, 2, 2, 60, 61, 7, 42, 2, 2,
	61, 14, 3, 2, 2, 2, 62, 63, 7, 43, 2, 2, 63, 16, 3, 2, 2, 2, 64, 65, 7,
	42, 2, 2, 65, 18, 3, 2, 2, 2, 66, 67, 7, 40, 2, 2, 67, 68, 7, 40, 2, 2,
	68, 20, 3, 2, 2, 2, 69, 70, 7, 126, 2, 2, 70, 71, 7, 126, 2, 2, 71, 22,
	3, 2, 2, 2, 72, 73, 7, 66, 2, 2, 73, 74, 7, 48, 2, 2, 74, 24, 3, 2, 2,
	2, 75, 76, 7, 66, 2, 2, 76, 77, 7, 48, 2, 2, 77, 78, 7, 110, 2, 2, 78,
	79, 7, 103, 2, 2, 79, 80, 7, 112, 2, 2, 80, 81, 7, 105, 2, 2, 81, 82, 7,
	118, 2, 2, 82, 83, 7, 106, 2, 2, 83, 26, 3, 2, 2, 2, 84, 85, 7, 63, 2,
	2, 85, 86, 7, 128, 2, 2, 86, 28, 3, 2, 2, 2, 87, 91, 9, 2, 2, 2, 88, 90,
	9, 3, 2, 2, 89, 88, 3, 2, 2, 2, 90, 93, 3, 2, 2, 2, 91, 89, 3, 2, 2, 2,
	91, 92, 3, 2, 2, 2, 92, 30, 3, 2, 2, 2, 93, 91, 3, 2, 2, 2, 94, 96, 7,
	47, 2, 2, 95, 94, 3, 2, 2, 2, 95, 96, 3, 2, 2, 2, 96, 98, 3, 2, 2, 2, 97,
	99, 4, 50, 59, 2, 98, 97, 3, 2, 2, 2, 99, 100, 3, 2, 2, 2, 100, 98, 3,
	2, 2, 2, 100, 101, 3, 2, 2, 2, 101, 32, 3, 2, 2, 2, 102, 104, 7, 47, 2,
	2, 103, 102, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 104, 106, 3, 2, 2, 2, 105,
	107, 4, 50, 59, 2, 106, 105, 3, 2, 2, 2, 107, 108, 3, 2, 2, 2, 108, 106,
	3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 116, 3, 2, 2, 2, 110, 112, 7, 48,
	2, 2, 111, 113, 4, 50, 59, 2, 112, 111, 3, 2, 2, 2, 113, 114, 3, 2, 2,
	2, 114, 112, 3, 2, 2, 2, 114, 115, 3, 2, 2, 2, 115, 117, 3, 2, 2, 2, 116,
	110, 3, 2, 2, 2, 116, 117, 3, 2, 2, 2, 117, 34, 3, 2, 2, 2, 118, 122, 7,
	41, 2, 2, 119, 121, 10, 4, 2, 2, 120, 119, 3, 2, 2, 2, 121, 124, 3, 2,
	2, 2, 122, 120, 3, 2, 2, 2, 122, 123, 3, 2, 2, 2, 123, 125, 3, 2, 2, 2,
	124, 122, 3, 2, 2, 2, 125, 126, 7, 41, 2, 2, 126, 36, 3, 2, 2, 2, 127,
	131, 7, 48, 2, 2, 128, 129, 7, 48, 2, 2, 129, 131, 7, 48, 2, 2, 130, 127,
	3, 2, 2, 2, 130, 128, 3, 2, 2, 2, 131, 38, 3, 2, 2, 2, 132, 133, 7, 44,
	2, 2, 133, 40, 3, 2, 2, 2, 134, 135, 7, 110, 2, 2, 135, 136, 7, 103, 2,
	2, 136, 137, 7, 112, 2, 2, 137, 138, 7, 105, 2, 2, 138, 139, 7, 118, 2,
	2, 139, 140, 7, 106, 2, 2, 140, 141, 7, 42, 2, 2, 141, 142, 7, 43, 2, 2,
	142, 42, 3, 2, 2, 2, 143, 144, 9, 5, 2, 2, 144, 44, 3, 2, 2, 2, 145, 156,
	7, 64, 2, 2, 146, 147, 7, 64, 2, 2, 147, 156, 7, 63, 2, 2, 148, 156, 7,
	62, 2, 2, 149, 150, 7, 62, 2, 2, 150, 156, 7, 63, 2, 2, 151, 152, 7, 63,
	2, 2, 152, 156, 7, 63, 2, 2, 153, 154, 7, 35, 2, 2, 154, 156, 7, 63, 2,
	2, 155, 145, 3, 2, 2, 2, 155, 146, 3, 2, 2, 2, 155, 148, 3, 2, 2, 2, 155,
	149, 3, 2, 2, 2, 155, 151, 3, 2, 2, 2, 155, 153, 3, 2, 2, 2, 156, 46, 3,
	2, 2, 2, 157, 159, 9, 6, 2, 2, 158, 157, 3, 2, 2, 2, 159, 160, 3, 2, 2,
	2, 160, 158, 3, 2, 2, 2, 160, 161, 3, 2, 2, 2, 161, 162, 3, 2, 2, 2, 162,
	163, 8, 24, 2, 2, 163, 48, 3, 2, 2, 2, 14, 2, 91, 95, 100, 103, 108, 114,
	116, 122, 130, 155, 160, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'$'", "'['", "']'", "':'", "','", "'?('", "')'", "'('", "'&&'", "'||'",
	"'@.'", "'@.length'", "'=~'", "", "", "", "", "", "'*'", "'length()'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "Identifier", "INT",
	"NUMBER", "QUOTED", "DOTS", "STAR", "Length", "OP", "COMP", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "Identifier", "INT", "NUMBER", "QUOTED",
	"DOTS", "STAR", "Length", "OP", "COMP", "WS",
}

type JsonpathLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewJsonpathLexer(input antlr.CharStream) *JsonpathLexer {

	l := new(JsonpathLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Jsonpath.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// JsonpathLexer tokens.
const (
	JsonpathLexerT__0       = 1
	JsonpathLexerT__1       = 2
	JsonpathLexerT__2       = 3
	JsonpathLexerT__3       = 4
	JsonpathLexerT__4       = 5
	JsonpathLexerT__5       = 6
	JsonpathLexerT__6       = 7
	JsonpathLexerT__7       = 8
	JsonpathLexerT__8       = 9
	JsonpathLexerT__9       = 10
	JsonpathLexerT__10      = 11
	JsonpathLexerT__11      = 12
	JsonpathLexerT__12      = 13
	JsonpathLexerIdentifier = 14
	JsonpathLexerINT        = 15
	JsonpathLexerNUMBER     = 16
	JsonpathLexerQUOTED     = 17
	JsonpathLexerDOTS       = 18
	JsonpathLexerSTAR       = 19
	JsonpathLexerLength     = 20
	JsonpathLexerOP         = 21
	JsonpathLexerCOMP       = 22
	JsonpathLexerWS         = 23
)
