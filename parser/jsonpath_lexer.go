// Generated from Jsonpath.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 23, 152,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7,
	3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 12,
	3, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 5, 13, 81, 10, 13, 3, 14, 3, 14, 7, 14, 85, 10, 14, 12, 14, 14, 14,
	88, 11, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 16, 5, 16, 100, 10, 16, 3, 16, 6, 16, 103, 10, 16, 13, 16, 14, 16,
	104, 3, 17, 3, 17, 3, 17, 6, 17, 110, 10, 17, 13, 17, 14, 17, 111, 5, 17,
	114, 10, 17, 3, 18, 3, 18, 7, 18, 118, 10, 18, 12, 18, 14, 18, 121, 11,
	18, 3, 18, 3, 18, 3, 19, 3, 19, 7, 19, 127, 10, 19, 12, 19, 14, 19, 130,
	11, 19, 3, 19, 3, 19, 7, 19, 134, 10, 19, 12, 19, 14, 19, 137, 11, 19,
	3, 20, 3, 20, 3, 20, 5, 20, 142, 10, 20, 3, 21, 3, 21, 3, 22, 6, 22, 147,
	10, 22, 13, 22, 14, 22, 148, 3, 22, 3, 22, 2, 2, 23, 3, 3, 5, 4, 7, 5,
	9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27,
	15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 3,
	2, 9, 5, 2, 44, 45, 47, 47, 49, 49, 4, 2, 67, 92, 99, 124, 6, 2, 50, 59,
	67, 92, 97, 97, 99, 124, 3, 2, 41, 41, 3, 2, 49, 49, 6, 2, 85, 85, 107,
	107, 111, 111, 119, 119, 5, 2, 11, 12, 15, 15, 34, 34, 2, 166, 2, 3, 3,
	2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3,
	2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19,
	3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2,
	27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2,
	2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2,
	2, 2, 43, 3, 2, 2, 2, 3, 45, 3, 2, 2, 2, 5, 47, 3, 2, 2, 2, 7, 49, 3, 2,
	2, 2, 9, 51, 3, 2, 2, 2, 11, 53, 3, 2, 2, 2, 13, 55, 3, 2, 2, 2, 15, 58,
	3, 2, 2, 2, 17, 60, 3, 2, 2, 2, 19, 62, 3, 2, 2, 2, 21, 65, 3, 2, 2, 2,
	23, 68, 3, 2, 2, 2, 25, 80, 3, 2, 2, 2, 27, 82, 3, 2, 2, 2, 29, 89, 3,
	2, 2, 2, 31, 99, 3, 2, 2, 2, 33, 106, 3, 2, 2, 2, 35, 115, 3, 2, 2, 2,
	37, 124, 3, 2, 2, 2, 39, 141, 3, 2, 2, 2, 41, 143, 3, 2, 2, 2, 43, 146,
	3, 2, 2, 2, 45, 46, 7, 38, 2, 2, 46, 4, 3, 2, 2, 2, 47, 48, 7, 93, 2, 2,
	48, 6, 3, 2, 2, 2, 49, 50, 7, 95, 2, 2, 50, 8, 3, 2, 2, 2, 51, 52, 7, 60,
	2, 2, 52, 10, 3, 2, 2, 2, 53, 54, 7, 46, 2, 2, 54, 12, 3, 2, 2, 2, 55,
	56, 7, 65, 2, 2, 56, 57, 7, 42, 2, 2, 57, 14, 3, 2, 2, 2, 58, 59, 7, 43,
	2, 2, 59, 16, 3, 2, 2, 2, 60, 61, 7, 42, 2, 2, 61, 18, 3, 2, 2, 2, 62,
	63, 7, 66, 2, 2, 63, 64, 7, 48, 2, 2, 64, 20, 3, 2, 2, 2, 65, 66, 7, 63,
	2, 2, 66, 67, 7, 128, 2, 2, 67, 22, 3, 2, 2, 2, 68, 69, 9, 2, 2, 2, 69,
	24, 3, 2, 2, 2, 70, 81, 7, 64, 2, 2, 71, 72, 7, 64, 2, 2, 72, 81, 7, 63,
	2, 2, 73, 81, 7, 62, 2, 2, 74, 75, 7, 62, 2, 2, 75, 81, 7, 63, 2, 2, 76,
	77, 7, 63, 2, 2, 77, 81, 7, 63, 2, 2, 78, 79, 7, 35, 2, 2, 79, 81, 7, 63,
	2, 2, 80, 70, 3, 2, 2, 2, 80, 71, 3, 2, 2, 2, 80, 73, 3, 2, 2, 2, 80, 74,
	3, 2, 2, 2, 80, 76, 3, 2, 2, 2, 80, 78, 3, 2, 2, 2, 81, 26, 3, 2, 2, 2,
	82, 86, 9, 3, 2, 2, 83, 85, 9, 4, 2, 2, 84, 83, 3, 2, 2, 2, 85, 88, 3,
	2, 2, 2, 86, 84, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 28, 3, 2, 2, 2, 88,
	86, 3, 2, 2, 2, 89, 90, 7, 110, 2, 2, 90, 91, 7, 103, 2, 2, 91, 92, 7,
	112, 2, 2, 92, 93, 7, 105, 2, 2, 93, 94, 7, 118, 2, 2, 94, 95, 7, 106,
	2, 2, 95, 96, 7, 42, 2, 2, 96, 97, 7, 43, 2, 2, 97, 30, 3, 2, 2, 2, 98,
	100, 7, 47, 2, 2, 99, 98, 3, 2, 2, 2, 99, 100, 3, 2, 2, 2, 100, 102, 3,
	2, 2, 2, 101, 103, 4, 50, 59, 2, 102, 101, 3, 2, 2, 2, 103, 104, 3, 2,
	2, 2, 104, 102, 3, 2, 2, 2, 104, 105, 3, 2, 2, 2, 105, 32, 3, 2, 2, 2,
	106, 113, 5, 31, 16, 2, 107, 109, 7, 48, 2, 2, 108, 110, 4, 50, 59, 2,
	109, 108, 3, 2, 2, 2, 110, 111, 3, 2, 2, 2, 111, 109, 3, 2, 2, 2, 111,
	112, 3, 2, 2, 2, 112, 114, 3, 2, 2, 2, 113, 107, 3, 2, 2, 2, 113, 114,
	3, 2, 2, 2, 114, 34, 3, 2, 2, 2, 115, 119, 7, 41, 2, 2, 116, 118, 10, 5,
	2, 2, 117, 116, 3, 2, 2, 2, 118, 121, 3, 2, 2, 2, 119, 117, 3, 2, 2, 2,
	119, 120, 3, 2, 2, 2, 120, 122, 3, 2, 2, 2, 121, 119, 3, 2, 2, 2, 122,
	123, 7, 41, 2, 2, 123, 36, 3, 2, 2, 2, 124, 128, 7, 49, 2, 2, 125, 127,
	10, 6, 2, 2, 126, 125, 3, 2, 2, 2, 127, 130, 3, 2, 2, 2, 128, 126, 3, 2,
	2, 2, 128, 129, 3, 2, 2, 2, 129, 131, 3, 2, 2, 2, 130, 128, 3, 2, 2, 2,
	131, 135, 7, 49, 2, 2, 132, 134, 9, 7, 2, 2, 133, 132, 3, 2, 2, 2, 134,
	137, 3, 2, 2, 2, 135, 133, 3, 2, 2, 2, 135, 136, 3, 2, 2, 2, 136, 38, 3,
	2, 2, 2, 137, 135, 3, 2, 2, 2, 138, 142, 7, 48, 2, 2, 139, 140, 7, 48,
	2, 2, 140, 142, 7, 48, 2, 2, 141, 138, 3, 2, 2, 2, 141, 139, 3, 2, 2, 2,
	142, 40, 3, 2, 2, 2, 143, 144, 7, 44, 2, 2, 144, 42, 3, 2, 2, 2, 145, 147,
	9, 8, 2, 2, 146, 145, 3, 2, 2, 2, 147, 148, 3, 2, 2, 2, 148, 146, 3, 2,
	2, 2, 148, 149, 3, 2, 2, 2, 149, 150, 3, 2, 2, 2, 150, 151, 8, 22, 2, 2,
	151, 44, 3, 2, 2, 2, 14, 2, 80, 86, 99, 104, 111, 113, 119, 128, 135, 141,
	148, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'$'", "'['", "']'", "':'", "','", "'?('", "')'", "'('", "'@.'", "'=~'",
	"", "", "", "'length()'", "", "", "", "", "", "'*'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "OP", "COMP", "Identifier",
	"Length", "INT", "NUMBER", "QUOTED", "REGEX", "DOTS", "STAR", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "OP", "COMP", "Identifier", "Length", "INT", "NUMBER", "QUOTED",
	"REGEX", "DOTS", "STAR", "WS",
}

type JsonpathLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewJsonpathLexer(input antlr.CharStream) *JsonpathLexer {

	l := new(JsonpathLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Jsonpath.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// JsonpathLexer tokens.
const (
	JsonpathLexerT__0       = 1
	JsonpathLexerT__1       = 2
	JsonpathLexerT__2       = 3
	JsonpathLexerT__3       = 4
	JsonpathLexerT__4       = 5
	JsonpathLexerT__5       = 6
	JsonpathLexerT__6       = 7
	JsonpathLexerT__7       = 8
	JsonpathLexerT__8       = 9
	JsonpathLexerT__9       = 10
	JsonpathLexerOP         = 11
	JsonpathLexerCOMP       = 12
	JsonpathLexerIdentifier = 13
	JsonpathLexerLength     = 14
	JsonpathLexerINT        = 15
	JsonpathLexerNUMBER     = 16
	JsonpathLexerQUOTED     = 17
	JsonpathLexerREGEX      = 18
	JsonpathLexerDOTS       = 19
	JsonpathLexerSTAR       = 20
	JsonpathLexerWS         = 21
)
